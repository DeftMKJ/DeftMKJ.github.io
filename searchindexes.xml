<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>Hugo搭建博客</title><url>/post/%E5%B7%A5%E5%85%B7/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url><categories><category/></categories><tags><tag/><tag/></tags><content type="html">前言 Hugo的搭建过程非常简单, 可以参考 官方文档 . 我在这里进行一个简单的总结.
1. 创建Github库 由于我们暂时没有自己的域名和服务器，先托管到Github Page
1.1 打开Github，新建一个库 1. 仓库 https://github.com/DeftMKJ/mikejing_blog 博客写文章和配置主题仓库
https://github.com/DeftMKJ/DeftMKJ.github.io Github Page 产物仓库
2. 评论功能 官方教程：https://waline.js.org/guide/get-started/#%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B
视频教程：https://space.bilibili.com/355877984
注册LeanCloud:https://console.leancloud.app/apps/ey8Oub7LlG7YJpSDXR9dnUGQ-MdYXbMMI/settings/keys
部署的Server URL：https://mkj-blog-eight.vercel.app/
Vercel管理后台：https://vercel.com/deftmkj/mkj-blog/settings/domains
3. 基操作 https://zhuanlan.zhihu.com/p/260811965 4. Hugo的视频介绍 https://www.bilibili.com/video/BV1q4411i7gL/?vd_source=31d31716a175b2b28702215e69091cf2 5. Hugo的博客教程 https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</content></entry><entry><title>KMM（Kotlin Multiplatform Mobile）Welcome to Kotlin/Native World</title><url>/post/kmm/kotlin-native/</url><categories><category>KMM跨平台</category></categories><tags><tag>KMM</tag><tag>Kotlin/Native</tag><tag>iOS</tag><tag>多线程</tag></tags><content type="html">1. 什么是Kotlin/Native Kotlin/Native是一种将Kotlin源码编译成不需要任何VM支持的目标平台二进制数据的技术，编译后的产物可以直接运行在目标平台上，设计Kotlin/Native的目的是支持在非JVM环境下进行编程，如在嵌入式平台和iOS环境下，如此一来，Kotlin就可以运行在非JVM平台环境下</content></entry><entry><title>KMM环境搭建</title><url>/post/kmm/kmm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url><categories><category>KMM跨平台</category></categories><tags><tag>跨平台</tag><tag>Kotlin</tag></tags><content type="html"><![CDATA[1. 操作系统 操作系统版本：最高支持 Monterey ，最低支持 Big Sur 验证： 左上角 ---&gt; 关于本机 ---&gt; macOS Monterey
2. iOS 环境 2.1 Xcode 支持 13.2.1 ,可直接通过 Apple Store 更新
xcodebuild -version Xcode 13.2.1 Build version 13C100 2.2 Cocoapods // 安装命令 sudo gem install cocoapods -v 1.10.1 -n /usr/local/bin sudo gem install cocoapods-generate -v 2.2.2 验证：
gem list | grep &#39;cocoapods&#39; cocoapods (1.10.1) cocoapods-generate (2.2.2) 2.3 内网源 更新本地源
// 执行 pod repo list pod repo update 3. Android 环境 3.1 Android Studio 左上角Android Studio ---&gt; About Android Studio ---&gt; Android Studio Arctic Fox | 2020.3.1 Patch 3+ 或者最新版本 建议修改配置： Auto Import：Setting - Editor - General - Auto Import，勾选Optimize imports on the fly和Add unambiguous imports on the fly 作者信息：Setting - Editor - File and Code Templates - include - File Header
/** * Usage: * * author: ${USER} * Date: ${DATE} * Description: */ 3.2 KMM 插件 和Android Studio配套 Android Studio ---&gt; Preferences ---&gt; Plugins 搜索 KMM 并安装插件即可
3.3 Gradle、Gradle插件、Kotlin 代码已经设置好，run时会自动下载 Gradle验证： 项目根目录打开 Terminal
//执行 ./gradlew -v 3.4 JDK Android Studio ---&gt; Preferences ---&gt; Gradle ---&gt; Gradle JDK 中选中JDK11即可
Q&amp;A 1. 非M1环境下上述环境都配置正确， pod gen xxx 报错，怎么办 Git 用户名密码管理 2. 环境配置正确，出现如下错误 gradle 缓存问题，清理缓存重新build
3. 如何清理缓存 轻度清理： Build --&gt; Clean Project or 项目根目录手动删除 build 文件夹 彻底清理：File -&gt; Invalidate Caches/Restart
]]></content></entry><entry><title>IOS内存管理初始篇</title><url>/post/ios/ios%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%88%9D%E5%A7%8B%E7%AF%87/</url><categories><category>iOS</category></categories><tags><tag>iOS</tag><tag>内管管理</tag><tag>Autorelease Pool</tag></tags><content type="html"><![CDATA[iOS内存管理初始篇(测试)
1. Why Reduce Memory 更好的用户体验 启动更快 系统表现更好 App存留时间更长 2. Memory Footprint Not all memory is created equal
https://juejin.cn/post/6844903621276991502#heading-3 3. 命令 3.1 vmmap 查看详细报告
vmmap xxx.memgraph 查看摘要报告
vmmap --summary xxx.memgraph 配合grep命令查看所有动态库的Dirty Pages的综合
vmmap -pages xxx.memgraph | grep &#39;.dylib&#39; | awk &#39;{sum += $6} END { print &#34;Total Dirty Pages:&#34;sum}&#39; 只显示内存异常相关模块的数据CGImage
vmmap xx.memgraph | grep &#39;CG image&#39; 更多文档
man vvmap man leaks man heap 3.2 leaks 查看泄漏的内存
leaks xxx.memgraph 查看某处的内存泄漏
leaks --traceTree [address] xxx.memgraph 3.3 heap 查看所有堆区对象的内存使用
heap xxx.memgraph 默认情况下是按照对象数量进行排序的，通常情况他们不会造成什么内存问题。我们关心的是内存大小，因此按照-sortBySize的方式进行大小顺序来查看所有堆区对象的使用
heap xxx.memgraph -sortBySize 有了这些对象的内存地址后，我们还需要工具进行下一步分析。
3.4 malloc_history 开启：
在 Product -&gt; Scheme -&gt; Edit Scheme -&gt; Diagnostics 中，开启 Malloc Stack 功能，建议使用 Live Allocations Only 选项
查看内存分配历史
malloc_history xxx.memgraph [address] malloc_history xxx.memgraph --fullStacks [address] ]]></content></entry><entry><title>关于我</title><url>/about.html</url><categories/><tags/><content type="html">并非所有流浪者都迷失了自我 Email：714831204@qq.com
Wechat：13826241102</content></entry><entry><title>站点示例</title><url>/flinks.html</url><categories/><tags/><content type="html">如想交换本站友情链接，请在评论区留下你的站点信息，格式参考如下：
- name: Hugo-NexT desc: Hugo NexT 官方预览网站。 avatar: https://hugo-next.eu.org/imgs/hugo_next_avatar.png link: https://hugo-next.eu.org</content></entry></search>